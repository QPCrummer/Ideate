plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "ideate" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings

    maven { url = "https://mvn.devos.one/releases" } // Porting Lib releases
    maven { url = "https://mvn.devos.one/snapshots" } // Create and several dependencies
    maven { url = "https://maven.tterrag.com/" } // Flywheel
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven" } // Forge Config API Port

    maven { // Fabric ASM for Porting Lib
        url = "https://jitpack.io/"
        content { includeGroupAndSubgroups("com.github") }
    }

    maven { url = "https://maven.shedaniel.me" } // Cloth Config, REI
    maven { url = "https://maven.blamejared.com" } // JEI

    maven { url = "https://maven.terraformersmc.com/releases" } // Mod Menu, EMI
}

configurations.configureEach {
    resolutionStrategy {
        // make sure the desired version of loader is used. Sometimes old versions are pulled in transitively.
        force("net.fabricmc:fabric-loader:$fabric_loader_version")
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft("com.mojang:minecraft:$minecraft_version")
    mappings(loom.layered {
        it.officialMojangMappings { nameSyntheticMembers = false }
        it.parchment("org.parchmentmc.data:parchment-$minecraft_version:$parchment_version@zip")
    })
    modImplementation("net.fabricmc:fabric-loader:$fabric_loader_version")

    // dependencies
    modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_api_version")

    // Create - dependencies are added transitively
    modImplementation("com.simibubi.create:create-fabric-$minecraft_version:$create_version")

    // Development QOL
    modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version")

    // Recipe Viewers - Create Fabric supports JEI, REI, and EMI.
    // See root gradle.properties to choose which to use at runtime.
    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "jei": modLocalRuntime("mezz.jei:jei-$minecraft_version-fabric:$jei_version"); break
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
        case "emi": modLocalRuntime("dev.emi:emi:$emi_version"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $recipe_viewer. Must be JEI, REI, EMI, or disabled.")
    }

    implementation include('com.google.code.gson:gson:2.11.0')
}

processResources {
    // require dependencies to be the version compiled against or newer
    Map<String, Object> properties = [
            "version": version,
            "fabric_loader_version": fabric_loader_version,
            "fabric_api_version": fabric_api_version,
            "create_version": create_version,
            "minecraft_version": minecraft_version
    ]

    inputs.properties(properties)

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
